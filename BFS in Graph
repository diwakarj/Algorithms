// BFS in Graph


#include<iostream>
#include<list>

using namespace std;

class Graph
{
	int V;
	list<int> *adj;

public :
	Graph(int V);
	void addEdge(int v,int w);
	void BFS(int s); // s is the starting node

};

Graph::Graph(int V)
{
	this->V = V;
	adj = new list<int>[V];

}


void Graph::addEdge(int v, int w)
{
	adj[v].push_back(w);
}


void Graph::BFS(int s)
{
	bool *visited = new bool[V];
	for(int i=0;i<V;i++)
		visited[i] = false;

	// create a queue

	list<int> queue;

   // mark the current node as visited
	visited[s]=true;
	queue.push_back(s);


	list<int>::iterator i;

	while(!queue.empty())
	{
		// dequeue the vertex

		s= queue.front();
		cout<<s<<" ";
		queue.pop_front();

		// get all adj vertex of the dequeued vertex s

		for(i = adj[s].begin();i!=adj[s].end();++i)
		{
			if(!visited[*i])
			{
				visited[*i]=true;
			queue.push_back(*i);
			}
		}
	}
}

int main()
{
	cout<<"hello world";

	Graph g(4);
	g.addEdge(0,1);
	g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 0);
    g.addEdge(2, 3);
    g.addEdge(3, 3);

	cout<<"the BFS is"<<endl;

	g.BFS(2);
	getchar();
	return 0;
}


