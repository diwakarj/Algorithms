/*
Graph and its representations using Adjacency list
*/


#include<iostream>

using namespace std;

// Structure to represent a Adjlistnode
struct AdjListNode{

	int dest;
	struct AdjListNode *next;
};

// Structure to represent Adjcency List
struct AdjList{

	struct AdjListNode *head;
};

// Structure to represent a Grpah

struct Graph{
	int V;
	struct AdjList *arr;
};


// func to create a new adjecency list node

struct AdjListNode * CreateNode(int dest)
{
	struct AdjListNode *newnode = (struct AdjListNode *)malloc(sizeof(struct AdjListNode));
	newnode->dest = dest;
	newnode->next = NULL;

	return newnode;
}

// utility func to create graph of V vertices

struct Graph * createGraph (int v)
{
	struct Graph * graph =(struct Graph *)malloc(sizeof(struct Graph));
	graph->V = v;

	graph->arr = (struct AdjList *)malloc(v* sizeof(struct AdjList));

	for(int i=0;i<v;++v)
		graph->arr[i].head = NULL;

	return graph;
}

// Fuc to add and edge to graph

 void addEdge(struct Graph* graph, int dest, int src )
 {
	 //cout<<"addEdge"<<endl;

	 struct AdjListNode * newnode = CreateNode(dest);
	 
	 newnode->next = graph->arr[src].head;

	 graph->arr[src].head = newnode;

	 // reverse node

	 newnode = CreateNode(src);
	 newnode->next = graph->arr[dest].head;

	 graph->arr[dest].head = newnode;
 }

 // print graph

 void PrintGraph(struct Graph *graph)
 {
	 cout<<"PrintGraph"<<endl;

	 int v;

	 
	 for(v=0;v<graph->V;++v)
	 {
		 int x=0;
		 struct AdjListNode* pCrawl = graph->arr[v].head;
		 cout<<"Adjcency list of "<<v<<endl;
		 while(pCrawl)
		 {
			 if(x==4)
				 break;
				 cout<<pCrawl->dest<<" ";
				 cout<<"->"<<" ";
			 pCrawl = pCrawl->next;
			 x++;
		 }
		 cout<<"NULL";
		 cout<<endl;
	 }
 }


int main()
{


	cout<<"hello world new"<<endl;


	int V = 5;
	struct Graph * graph = createGraph(V);
	addEdge(graph,0,1);
	addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

	PrintGraph(graph);

	getchar();
	return 0;
}

