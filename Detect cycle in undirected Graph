
// Detect cycle in undirected Graph using DFS

/*

#include<iostream>
#include<list>

using namespace std;

class Graph
{
	int V;
    list<int> *adj;

public :

	Graph(int v);
	void addEdge(int v,int w);
	bool IsCyclic();
	bool IsCyclicUtil(int v,bool *visited,int parent);

};

Graph::Graph(int v)
{
	this->V=v;

	adj = new list<int>[v]; 
}

void Graph::addEdge(int v,int w)
{
	adj[v].push_back(w);
	adj[w].push_back(v);
}

bool Graph::IsCyclic()
{
	bool *visited = new bool[V];
    
	for(int i=0;i<V;i++)
		visited[i]=false;

	for(int v=0;v<V;v++)
		if(!visited[v])
		{
			if(IsCyclicUtil(v,visited,-1))
				return true;
		}

		return false;

}

bool Graph::IsCyclicUtil(int v, bool *visited, int parent)
{

	visited[v] = true;

	list<int>::iterator i;

	for(i = adj[v].begin();i!=adj[v].end();++i)
	{
			if(!visited[*i])
			{	
				if(IsCyclicUtil(*i,visited,v))
					return true;
			}
			else if(*i!=parent)
				return true;
	}

	return false;
}

int main()
{
	
	Graph g1(5);
	g1.addEdge(1, 0);
    g1.addEdge(0, 2);
    g1.addEdge(2, 0);
    g1.addEdge(0, 3);
    g1.addEdge(3, 4);
    g1.IsCyclic()? cout << "Graph contains cycle\n":
                   cout << "Graph doesn't contain cycle\n";
				   
	Graph g2(3);
		g2.addEdge(0, 1);
    g2.addEdge(1, 2);
    g2.IsCyclic()? cout << "Graph contains cycle\n":
                   cout << "Graph doesn't contain cycle\n";
 
    getchar();
	return 0;


}

*/
